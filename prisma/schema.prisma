generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  user_id          String?       @db.VarChar(36)
  email            String        @unique
  username         String
  password         String
  fullname         String
  birthdate        DateTime      @db.DateTime()
  avatar_url       String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  note             Note?
  publications     Publication[]
  comments         Comment[]
  user             User?         @relation("SubscribedUsers", fields: [user_id], references: [id])
  subscribed_users User[]        @relation("SubscribedUsers")

  @@index([user_id])
  @@map("users")
}

model Note {
  id         String   @id @default(cuid())
  user_id    String   @unique @db.VarChar(36)
  message    String   @db.Text
  auditory   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("notes")
}

model Publication {
  id          String    @id @default(cuid())
  user_id     String    @db.VarChar(36)
  picture_url String
  likes       Int       @default(0)
  is_liked    Boolean   @default(false)
  description String    @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  comments    Comment[]
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("publications")
}

model Comment {
  id             String       @id @default(cuid())
  user_id        String       @db.VarChar(36)
  publication_id String       @db.VarChar(36)
  message        String       @db.Text
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now()) @updatedAt
  user           User?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  publication    Publication? @relation(fields: [publication_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("comments")
}
